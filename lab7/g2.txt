N = program compoundstmt declist dec stmt stmtlist forstmt RANGE assignstmt ifstmt arraydecl type iostmt condition RELATION term sym expression
E = int bool str array + - * / % { : } ; end-if else if writeToConsole for , ( ) read [ ]  == <= >= > < IDENTIFIER NUM STR
S = program 
P =
program ::= compoundstmt
declist ::= dec | dec declist
dec ::= type IDENTIFIER ;
compoundstmt ::= stmt |  stmtlist
stmt ::= declist |ifstmt | forstmt
stmtlist ::= stmt | stmt ; stmtlist
forstmt ::= for IDENTIFIER : RANGE compoundstmt
RANGE ::= ( NUM , NUM )
assignstmt ::= IDENTIFIER = expression ;
ifstmt ::= if condition compoundstmt [else compoundstmt ] end-if
arraydecl ::= array type IDENTIFIER ;
type ::= int | bool | str
iostmt ::= read ( IDENTIFIER ) | writeToConsole ( IDENTIFIER )
condition ::= expression RELATION expression
RELATION ::= < | <= | == | <> | >= | >
term ::= NUM | STR | IDENTIFIER | IDENTIFIER [term]
sym ::= + | - | * | / | %
expression ::= term | term sym term
