%{
#include <math.h>
#include <stdio.h>
#include "scanner.h"
%}
%option noyywrap

DIGIT [0-9]
WORD ["]([a-zA-Z])*["]
NUMBER [1-9][0-9]*|0
CONST {WORD}|{NUMBER}
ID [a-zA-Z][a-zA-Z0-9]{0,17}

%%


"int" {printf("Reserved word:%s\n", yytext); return INT;}
"bool" {printf("Reserved word:%s\n", yytext); return BOOL;}
"str" {printf("Reserved word: %s\n", yytext); return STR;}
"read" {printf("Reserved word: %s\n", yytext); return READ;}
"writeToConsole" {printf("Reserved word: %s\n", yytext); return WRITE_TO_CONSOLE;}
"if" {printf("Reserved word: %s\n", yytext); return IF;}
"end-if" {printf("Reserved word: %s\n", yytext); return END_IF;}
"else" {printf("Reserved word: %s\n", yytext); return ELSE;}
"for" {printf("Reserved word: %s\n", yytext); return FOR;}
"and"   {printf("Reserved word: %s\n", yytext); return AND;}

":"	{printf( "Separator: %s\n", yytext ); return COLON;}
";"	{printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","	{printf( "Separator: %s\n", yytext ); return COMA;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"+="	{printf( "Operator: %s\n", yytext ); return INCREMENT_BY;}
"-="	{printf( "Operator: %s\n", yytext ); return DECREMENT_BY;}
"*="	{printf( "Operator: %s\n", yytext ); return MULTIPLY_BY;}
"/"	{printf( "Operator: %s\n", yytext ); return DIVISION;}
"%" {printf( "Operator: %s\n", yytext ); return MODULO;}
"("	{printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"	{printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"["	{printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"	{printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
"<"	{printf( "Operator: %s\n", yytext ); return LESS_THAN;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"<="	{printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
"="	    {printf( "Operator: %s\n", yytext ); return ASSIGNMENT;}
"=="	{printf( "Operator: %s\n", yytext ); return EQUAL;}


{ID} {printf("Identifier: %s\n",yytext); return IDENTIFIER;}
{CONST} {printf("Constant: %s\n", yytext); return CONSTANT;}

[ \t\n]   ;
.        {printf("Unexpected charachter\n");}

[0-9][a-zA-Z0-9]{0,7}  {printf("Illegal identifier: \n"); return -1;}

%%